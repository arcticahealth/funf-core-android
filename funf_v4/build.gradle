apply plugin: 'com.android.library'

android {
    compileSdkVersion 17
    buildToolsVersion "23.0.0"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 14
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            it.buildConfigField 'String', "COGNITO_POOL_ID", "\"us-west-2:6152caf7-9235-4976-a78c-6d99fe4bf691\""
            it.buildConfigField 'String', "S3_BUCKET_NAME", "\"data-dev-arcticahealth-com\""
            it.buildConfigField 'String', "S3_KMS_KEY", "\"93d95769-686b-4ff7-bda9-5ff1fa8954cd\""
        }
        debug {
            it.buildConfigField 'String', "COGNITO_POOL_ID", "\"us-west-2:6152caf7-9235-4976-a78c-6d99fe4bf691\""
            it.buildConfigField 'String', "S3_BUCKET_NAME", "\"data-dev-arcticahealth-com\""
            it.buildConfigField 'String', "S3_KMS_KEY", "\"93d95769-686b-4ff7-bda9-5ff1fa8954cd\""
        }
        buildTypes.each {

        }
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/DEPENDENCIES'
    }
}
configurations.all {
    resolutionStrategy {
        force 'com.google.code.gson:gson:2.1'
    }
}


dependencies {
    compile('com.amazonaws:aws-android-sdk-core:2.3.3')
    compile files('libs/gson-2.1.jar')
    compile 'com.amazonaws:aws-android-sdk-s3:2.3.3'
    compile 'com.amazonaws:aws-android-sdk-ddb:2.3.3'
    compile 'com.amazonaws:aws-android-sdk-cognito:2.3.3'
    compile group: 'com.google.guava', name: 'guava', version: '19.0'
    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
}


def getVersionName = {->
    println '*** getVersionName'
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'symbolic-ref', '--short', '-q', 'HEAD'
            standardOutput = stdout
        }

        def stdout2 = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'log', '-1', '--format=%h'
            standardOutput = stdout2
        }

        def stdout3 = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--abbrev=0'
            standardOutput = stdout3
            errorOutput = new ByteArrayOutputStream()
            ignoreExitValue = true
        }


        def return_value = stdout3.toString().trim() + "-" +stdout.toString().trim() + "-" + stdout2.toString().trim()
        println "return_value: "+return_value

        def assetsDir = android.sourceSets.main.assets.srcDirs.toArray()[0]
        println "assetsDir: "+assetsDir

        def assetsDirObject = new File(assetsDir, '')

        if (!assetsDirObject.exists()) {
            assetsDirObject.mkdirs();
        }

        def buildInfoFile = new File(assetsDir, 'build.info').getAbsolutePath()
        println "buildInfoFile: "+buildInfoFile

        new File(buildInfoFile).write(return_value);

        return return_value
    }
    catch (ignored) {
        return null;
    }

}

android {
    defaultConfig {
        versionName getVersionName()
    }
}